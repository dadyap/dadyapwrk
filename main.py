import asyncio
import os

from aiogram.client.session import aiohttp
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, FSInputFile
from dotenv import load_dotenv
from aiogram.fsm.state import State, StatesGroup

from db import Database
from keyboards import inline_kb, image_kb, exchangerate_kb


load_dotenv()

TOKEN = os.getenv('TOKEN')
WEATHER_API_KEY = os.getenv('WEATHER_API_KEY')

bot = Bot(token=TOKEN)
dp = Dispatcher()
db = Database(
    user=os.getenv('DB_USER'),
    password=os.getenv('DB_PASSWORD'),
    database=os.getenv('DB_NAME'),
    host=os.getenv('DB_HOST'),
    port=os.getenv('DB_PORT')
)


@dp.message(CommandStart())
async def start(message: types.Message):
    user_name = message.from_user.first_name
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {user_name}!', reply_markup=inline_kb)



@dp.message(F.text == "üí° –ö–∞—Ä—Ç–∏–Ω–∫–∞")
async def send_image_menu(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ:', reply_markup=image_kb)

@dp.message(F.text == '–ù–∞–∑–∞–¥')
async def backkb(message: Message):
    await message.answer('–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞–∑–∞–¥', reply_markup=inline_kb)


@dp.message(F.text == "–§—É—Ç–±–æ–ª‚öΩ")
async def send_football_image(message: Message):
    f = FSInputFile("ftbl.jpg")
    await message.answer_photo(f)


@dp.message(F.text == "–ë–æ–∫—Åü•ä")
async def send_boxing_image(message: Message):
    b = FSInputFile("box.jpg")
    await message.answer_photo(b)


@dp.message(F.text == "–ë–∞—Å–∫–µ—Ç–±–æ–ªüèÄ")
async def send_basketball_image(message: Message):
    b1 = FSInputFile("bskt.jpg")
    await message.answer_photo(b1)


@dp.message(F.text == "üèû –ü–æ–≥–æ–¥–∞")
async def get_weather(message: Message):
    url = f"https://api.openweathermap.org/data/2.5/weather?q=Bishkek&appid={WEATHER_API_KEY}&units=metric"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                type_ = data["weather"][0]["main"]
                temp_c = data["main"]["temp"]
                feels_like = data["main"]["feels_like"]
                city = data["name"]
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await message.answer(f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}:\n{type_}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp_c}¬∞C\n–ß—É–≤—Å—Ç–≤—É–µ—Ç—Å—è –∫–∞–∫: {feels_like}¬∞C")
            else:
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ.")



@dp.message(F.text == 'üí° –ö—É—Ä—Å –≤–∞–ª—é—Ç')
async def get_exchangerate(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É: ', reply_markup=exchangerate_kb)


@dp.message(F.text == 'USDüá∫üá∏')
async def usd(message: Message):
    await message.answer(f'–ü–æ–∫—É–ø–∫–∞ 86.70 \n–ü—Ä–æ–¥–∞–∂–∞	87.10')

@dp.message(F.text == 'EURüá™üá∫')
async def eur(message: Message):
    await message.answer(f'–ü–æ–∫—É–ø–∫–∞ 93.50 \n–ü—Ä–æ–¥–∞–∂–∞	94.00')

@dp.message(F.text == 'RUBüá∑üá∫')
async def rub(message: Message):
    await message.answer(f'–ü–æ–∫—É–ø–∫–∞ 1.005 \n–ü—Ä–æ–¥–∞–∂–∞	1.020')

@dp.message(F.text == 'KZTüá∞üáø')
async def kzt(message: Message):
    await message.answer(f'–ü–æ–∫—É–ø–∫–∞ 0.1229 \n–ü—Ä–æ–¥–∞–∂–∞ 0.1750')

@dp.message(F.text == 'CNYüá®üá≥')
async def cny(message: Message):
    await message.answer(f'–ü–æ–∫—É–ø–∫–∞ 11.80 \n–ü—Ä–æ–¥–∞–∂–∞ 12.40')

@dp.message(F.text == 'GBPüá¨üáß')
async def gbp(message: Message):
    await message.answer(f'–ü–æ–∫—É–ø–∫–∞ 109.00 \n–ü—Ä–æ–¥–∞–∂–∞ 111.00')
@dp.message(F.text == '–ù–∞–∑–∞–¥')
async def backkb(message: Message):
    await message.answer('–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞–∑–∞–¥', reply_markup=inline_kb)


@dp.message(F.text == 'üèû –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤')
async def send_movies(message: Message):
    await message.answer('–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤:\n1 - –ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä (Interstellar, 2014) ‚Äì –§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞, –¥—Ä–∞–º–∞ \n2 - –ù–∞—á–∞–ª–æ (Inception, 2010) ‚Äì –§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞, —Ç—Ä–∏–ª–ª–µ—Ä\n3 - –ó–µ–ª–µ–Ω–∞—è –º–∏–ª—è (The Green Mile, 1999) ‚Äì –î—Ä–∞–º–∞, —Ñ—ç–Ω—Ç–µ–∑–∏\n4 - –ü–æ–±–µ–≥ –∏–∑ –®–æ—É—à–µ–Ω–∫–∞ (The Shawshank Redemption, 1994) ‚Äì –î—Ä–∞–º–∞\n5 - –î–∂–µ–Ω—Ç–ª—å–º–µ–Ω—ã (The Gentlemen, 2019) ‚Äì –ö—Ä–∏–º–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ–º–µ–¥–∏—è')

class Survey(StatesGroup):
    name = State()
    age = State()
    subject = State()
    color = State()
    movie = State()
    hobby = State()
    dream = State()
    country = State()

@dp.message(F.text == 'üí° –®—É—Ç–∫–∞')
async def send_joke(message: Message):
    url = "https://v2.jokeapi.dev/joke/Any"

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                joke_data = await response.json()

                if joke_data["type"] == "single":
                    joke = joke_data["joke"]
                else:
                    joke = f'{joke_data["setup"]}\n\n{joke_data["delivery"]}'

                await message.answer(joke)
            else:
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à—É—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message(F.text == '–ù–∞–∑–∞–¥')
async def backkb(message: Message):
    await message.answer('–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞–∑–∞–¥', reply_markup=inline_kb)


@dp.message(F.text == "üèû –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å")
async def start_survey(message: Message, state: FSMContext):
    await state.set_state(Survey.name)
    await message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")


@dp.message(Survey.name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Survey.age)
    await message.answer("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")


@dp.message(Survey.age)
async def process_age(message: Message, state: FSMContext):
    await state.update_data(age=message.text)
    await state.set_state(Survey.subject)
    await message.answer("–ö–∞–∫–æ–π –≤–∞—à –ª—é–±–∏–º—ã–π —à–∫–æ–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç?")


@dp.message(Survey.subject)
async def process_subject(message: Message, state: FSMContext):
    await state.update_data(subject=message.text)
    await state.set_state(Survey.color)
    await message.answer("–ö–∞–∫–æ–π –≤–∞—à –ª—é–±–∏–º—ã–π —Ü–≤–µ—Ç?")


@dp.message(Survey.color)
async def process_color(message: Message, state: FSMContext):
    await state.update_data(color=message.text)
    await state.set_state(Survey.movie)
    await message.answer("–ö–∞–∫–æ–π –≤–∞—à –ª—é–±–∏–º—ã–π —Ñ–∏–ª—å–º?")


@dp.message(Survey.movie)
async def process_movie(message: Message, state: FSMContext):
    await state.update_data(movie=message.text)
    await state.set_state(Survey.hobby)
    await message.answer("–ö–∞–∫–æ–µ —É –≤–∞—Å —Ö–æ–±–±–∏?")


@dp.message(Survey.hobby)
async def process_hobby(message: Message, state: FSMContext):
    await state.update_data(hobby=message.text)
    await state.set_state(Survey.dream)
    await message.answer("–û —á–µ–º –≤—ã –º–µ—á—Ç–∞–µ—Ç–µ?")


@dp.message(Survey.dream)
async def process_dream(message: Message, state: FSMContext):
    await state.update_data(dream=message.text)
    await state.set_state(Survey.country)
    await message.answer("–í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –≤—ã –º–µ—á—Ç–∞–µ—Ç–µ –ø–æ–±—ã–≤–∞—Ç—å?")


@dp.message(Survey.country)
async def process_country(message: Message, state: FSMContext):
    await state.update_data(country=message.text)
    data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ PostgreSQL
#    conn = await db.connect()
#    await conn.execute(
#        'INSERT INTO survey_results (name, age, subject, color, movie, hobby, dream, country) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)',
#        data['name'], data['age'], data['subject'], data['color'], data['movie'], data['hobby'], data['dream'],
#        data['country']
#    )
#    await conn.close()

    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    result = (f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞:\n"
              f"–ò–º—è: {data['name']}\n"
              f"–í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n"
              f"–õ—é–±–∏–º—ã–π –ø—Ä–µ–¥–º–µ—Ç: {data['subject']}\n"
              f"–õ—é–±–∏–º—ã–π —Ü–≤–µ—Ç: {data['color']}\n"
              f"–õ—é–±–∏–º—ã–π —Ñ–∏–ª—å–º: {data['movie']}\n"
              f"–•–æ–±–±–∏: {data['hobby']}\n"
              f"–ú–µ—á—Ç–∞: {data['dream']}\n"
              f"–°—Ç—Ä–∞–Ω–∞ –º–µ—á—Ç—ã: {data['country']}")

    await message.answer(result)
    await state.clear()





async def main():
    print('Bot started...')
    await db.connect()
    try:
        await dp.start_polling(bot)
    except Exception as e:
        print(e)
    finally:
        await db.disconnect()

if __name__ == '__main__':
    asyncio.run(main())